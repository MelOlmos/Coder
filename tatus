[1mdiff --git a/src/Routes/cartRoutesDB.js b/src/Routes/cartRoutesDB.js[m
[1mindex bc7361a..e7ef86f 100644[m
[1m--- a/src/Routes/cartRoutesDB.js[m
[1m+++ b/src/Routes/cartRoutesDB.js[m
[36m@@ -7,7 +7,8 @@[m [mconst {[m
   getAllCarts,[m
   getCartById,[m
   addCart,[m
[31m-  updateCart[m
[32m+[m[32m  updateCart,[m
[32m+[m[32m  purchaseCart[m
   } = new CartController()[m
 [m
 [m
[36m@@ -26,6 +27,9 @@[m [mrouter.post('/', addCart);[m
 /* Actualizar carrito por ID */[m
 router.put('/:cartId', updateCart);[m
 [m
[32m+[m[32m/* Ruta para finalizar la compra de un carrito */[m
[32m+[m[32mrouter.post('/:cartId/purchase', purchaseCart);[m
[32m+[m
 [m
 module.exports = router;[m
 [m
[1mdiff --git a/src/controllers/carts.controller.js b/src/controllers/carts.controller.js[m
[1mindex 89dd480..30228b0 100644[m
[1m--- a/src/controllers/carts.controller.js[m
[1m+++ b/src/controllers/carts.controller.js[m
[36m@@ -1,5 +1,6 @@[m
 const { authorization } = require('../middleware/authentication.js');[m
 const { cartService } = require('../repositories/index.js');[m
[32m+[m[32mconst { productService } = require('../repositories/index.js')[m
 [m
 [m
 // Middleware de autorizaci√≥n para el rol user[m
[36m@@ -104,7 +105,73 @@[m [mclass CartController {[m
             res.status(500).json({ error: error.message });[m
         }[m
     }[m
[32m+[m
[32m+[m[32m    /*Para el ticket de compra*/[m
[32m+[m[32m    async purchaseCart(req, res) {[m
[32m+[m[32m        try {[m
[32m+[m[32m            const cartId = req.params.cartId;[m
[32m+[m[32m            const cart = await cartService.getCartById(cartId); //busco por id de carrito[m
[32m+[m
[32m+[m[32m            if (!cart) {[m
[32m+[m[32m                return res.status(404).json({ error: 'Carrito no encontrado :C' });[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            const products = cart.products;[m
[32m+[m[32m            const productsNotPurchased = [];[m
[32m+[m
[32m+[m[32m            //verifica si hay stock en los productos del cart[m
[32m+[m[32m            for (const product of products) {[m
[32m+[m[32m                const { productId, quantity } = product;[m
[32m+[m[32m                const productDetails = await productService.getProductById(productId);[m
[32m+[m
[32m+[m[32m                if (!productDetails || productDetails.stock < quantity) {[m
[32m+[m[32m                    productsNotPurchased.push(productId);[m
[32m+[m[32m                    continue;[m
[32m+[m[32m                }[m
[32m+[m
[32m+[m[32m                // Resta la cantidad comprada del stock del product[m
[32m+[m[32m                const newStock = productDetails.stock - quantity;[m
[32m+[m[32m                await productService.updateProduct(productId, { stock: newStock });[m
[32m+[m[32m            }[m
[32m+[m[32m            if (productsNotPurchased.length > 0) {[m
[32m+[m[32m                return res.status(400).json({ error: 'Algunos productos no tienen stock', productsNotPurchased });[m
[32m+[m[32m            }[m
[32m+[m
[32m+[m[32m            // Crea el ticket[m
[32m+[m[32m            const ticketData = {[m
[32m+[m[32m                code: ticketCode(),[m
[32m+[m[32m                purchase_datetime: new Date(),[m
[32m+[m[32m                amount: cart.amount,[m
[32m+[m[32m                purchaser: req.session.user.email,[m[41m [m
[32m+[m[32m                products: cart.products[m
[32m+[m[32m            };[m
[32m+[m
[32m+[m[32m            const createdTicket = await ticketService.createTicket(ticketData);[m
[32m+[m
[32m+[m[32m            // Actualiza el carrito[m[41m [m
[32m+[m[32m            await cartService.updateCart(cartId, { products: productsNotPurchased });[m
[32m+[m
[32m+[m[32m            // Devuelve el ticket[m
[32m+[m[32m            res.json(createdTicket);[m
[32m+[m[32m        } catch (error) {[m
[32m+[m[32m            res.status(500).json({ error: error.message });[m
[32m+[m[32m        }[m
[32m+[m[32m    }[m
 }[m
 [m
[32m+[m[32mfunction ticketCode() {[m
[32m+[m[32m    // Genero un c√≥digo aleatorio con n√∫meros y letras[m
[32m+[m[32m    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';[m
[32m+[m[32m    const codeLength = 6;[m
[32m+[m[32m    let code = '';[m
[32m+[m
[32m+[m[32m    for (let i = 0; i < codeLength; i++) {[m
[32m+[m[32m        const randomIndex = Math.floor(Math.random() * characters.length);[m
[32m+[m[32m        //obtiene el caracter en la posici√≥n randomIndex y lo suma al final[m
[32m+[m[32m        code += characters.charAt(randomIndex);[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    return code;[m
[32m+[m[32m}[m
 [m
 module.exports = CartController[m
\ No newline at end of file[m
[1mdiff --git a/src/repositories/productRepository.js b/src/repositories/productRepository.js[m
[1mindex 7e29e86..7a4f4eb 100644[m
[1m--- a/src/repositories/productRepository.js[m
[1m+++ b/src/repositories/productRepository.js[m
[36m@@ -1,4 +1,3 @@[m
[31m-[m
 class ProductRepository {[m
     constructor(productDao){[m
         this.dao = productDao[m
[1mdiff --git a/src/views/chat.handlebars b/src/views/chat.handlebars[m
[1mindex f436b31..bfa8929 100644[m
[1m--- a/src/views/chat.handlebars[m
[1m+++ b/src/views/chat.handlebars[m
[36m@@ -25,9 +25,9 @@[m [mlet chatBox = document.getElementById('chatBox');[m
 Swal.fire({[m
   title: "Indentif√≠cate",[m
   input: "text",[m
[31m-  text: "Ingresa un nombre de usuario para utilizar el chat",[m
[32m+[m[32m  text: "Ingresa un CORREO ELECTR√ìNICO para utilizar el chat",[m
   inputValidator: (value) => {[m
[31m-    return !value && 'Necesitas escribir un usuario para continuar'[m
[32m+[m[32m    return !value && 'Necesitas escribir un correo para continuar'[m
   },[m
   allowOutsideClick:false[m
 }).then (result => {[m
[1mdiff --git a/src/views/products.handlebars b/src/views/products.handlebars[m
[1mindex 3b509b6..ae997a4 100644[m
[1m--- a/src/views/products.handlebars[m
[1m+++ b/src/views/products.handlebars[m
[36m@@ -4,6 +4,10 @@[m
 [m
   <form action="/api/session/logout" method="POST"> <button type="submit">LOGOUT</button>[m
 </form>[m
[32m+[m
[32m+[m[32m<button onclick="redirectToPurchase()">Finalizar compra</button>[m
[32m+[m
[32m+[m
   <h2>Products result</h2>[m
 {{#each products}}[m
     <ul>[m
[36m@@ -21,6 +25,12 @@[m
 [m
   // Esto hace la acci√≥n onclick[m
   function addToCart(productId) {[m
[32m+[m[41m    [m
[32m+[m[32m    if ({{ email }} === "adminCoder@coder.com") {[m
[32m+[m[32m        document.getElementById(productId).innerHTML = "Unauthorized";[m
[32m+[m[32m        return;[m
[32m+[m[32m      }[m
[32m+[m[32m    //[m
     fetch(`/api/carts/65b3fd56c512050429ca55ec/products/`, {[m
       method: 'POST',[m
       headers: {[m
[36m@@ -34,8 +44,13 @@[m
       console.log('Producto agregado al carrito:', data);[m
     })[m
     .catch(error => console.error('Error al agregar al carrito:', error));[m
[32m+[m[32m    //[m
[32m+[m[32m    function redirectToPurchase() {[m
[32m+[m[32m      window.location.href = "/api/carts/65b3fd56c512050429ca55ec/purchase";[m
[32m+[m[32m    }[m
   }[m
 </script>[m
[32m+[m
 <div>[m
 {{#if hasPrevPage}}[m
     <a href="/products?page={{prevPage}}">Before</a>[m
