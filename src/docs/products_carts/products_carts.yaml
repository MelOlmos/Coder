#RUTAS DE PRODUCTOS

paths: 
  /api/products-db/:
  #regionget
    get:
      summary: Obtiene los productos de la DB de Mongo. Funciona logueado con cualquier rol.
      tags:
        - Products
      responses:
        "200":
          description: Trae correctamente los productos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/product'
        "500":
          description: Error de servidor al traer los productos
        "401":
          description: Unauthorized
  #regionpost
    post:
      summary: Este endpoint crea un producto. Necesario ser admin o premium y es correcto.
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createProduct'
      responses:
        "201":
          description: El producto se creó con éxito en la DB.
        "500":
          description: Error de servidor al crear el producto
        "401":
          description: Unauthorized
  /api/products-db/{pid}:
  #regionget
    get:
      summary: Obtiene un producto por su id. Funciona logueado con cualquier rol.
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: El id del producto que solicita, llamado pid. Ejemplo id 65f6247864b452e91a97e46c
          schema: 
            type: string
      responses:
        "200":
          description: El producto se obtuvo correctamente
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/product'
        "500":
          description: Error de servidor al traer el producto
        "401":
          description: Unauthorized
  #regionput
    put:
      summary: Actualiza un producto accediendo por su id. Necesario ser admin y es correcto.
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: El id del producto que solicita, llamado pid. Ejemplo id 65f6247864b452e91a97e46c
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createProduct'
      responses:
        "200":
          description: El producto se actualizó correctamente
        "500":
          description: Error de servidor al actualizar el producto
        "401":
          description: Unauthorized
  #region patch
    patch:
      summary: Actualiza parte del producto accediendo por su id. Necesario ser admin y es correcto.
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: El id del producto que solicita, llamado pid. Ejemplo id 65f6247864b452e91a97e46c
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/updateProduct'
      responses:
        "200":
          description: El producto se actualizó correctamente
        "500":
          description: Error de servidor al actualizar el producto
        "401":
          description: Unauthorized
  #regiondelete
    delete:
      summary: Elimina un producto accediendo por su id (borrado lógico). Necesario ser admin.
      tags:
        - Products
      parameters:
        - name: pid
          in: path
          required: true
          description: El id del producto que desea eliminar, llamado pid. Ejemplo id 65f6247864b452e91a97e46c
          schema:
            type: string
      responses:
        "200":
          description: El producto se actualizó correctamente
        "500":
          description: Error de servidor al actualizar el producto
        "401":
          description: Unauthorized
# RUTAS DE CARTS
  /api/carts/:
  #region get
    get:
      summary: Obtiene todos los carritos de la DB. Funciona con o sin login.
      tags:
        - Carts
      responses:
        "200":
          description: Trae correctamente los carritos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/cart'
        "500":
          description: Error de servidor al traer los carritos
        "401":
          description: Unauthorized
  #region post
    post:
      summary: Este endpoint crea un carrito / VER QUE DA ERROR DE AUTENTICACIÓN PROBANDO COMO ADMIN
      tags:
        - Carts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createCart'
      responses:
        "201":
          description: El carrito se creó con éxito en la DB.
        "500":
          description: Error de servidor al crear carrito
        "401":
          description: Unauthorized
  /api/carts/{cartId}:
    get:
      summary: Obtiene un carrito llamando por su id. Funciona con o sin login.
      tags:
        - Carts
      parameters:
        - name: cartId
          in: path
          required: true
          description: El id del carrito sobre el que se opera, llamado cartId. Ejemplo id 662145749e3a712e0ebbf9d3
          schema: 
            type: string
      responses:
        "200":
          description: El carrito se obtuvo correctamente
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/cart'
        "500":
          description: Error de servidor al traer el carrito
        "401":
          description: Unauthorized
    put:
      summary: Actualiza un carrito accediendo por su id. Funciona con o sin login.
      tags:
        - Carts
      parameters:
        - name: cartId
          in: path
          required: true
          description: El id del carrito sobre el que se opera, llamado cartId. Ejemplo id 662145749e3a712e0ebbf9d3
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/updateCart'
      responses:
        "200":
          description: El carrito se actualizó correctamente
        "500":
          description: Error de servidor al actualizar el carrito
        "401":
          description: Unauthorized
  #region patch
    patch:
      summary: Actualiza parte del carrito (algún producto) accediendo por id del carro. // PENDIENTE DE CREAR LA RUTA
      tags:
        - Carts
      parameters:
        - name: cartId
          in: path
          required: true
          description: El id del carrito sobre el que se opera, llamado cartId. Ejemplo id 662145749e3a712e0ebbf9d3
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/updateCart'
      responses:
        "200":
          description: El carrito se actualizó correctamente
        "500":
          description: Error de servidor al actualizar el carrito
        "401":
          description: Unauthorized
  /api/carts/{cartId}/products/:
    post:
      summary: Este endpoint agrega un producto al carrito. Funciona logueado con cualquier rol.
      tags:
        - Carts
      parameters:
        - name: cartId
          in: path
          required: true
          description: El id del carrito sobre el que se opera, llamado cartId. Ejemplo id 662145749e3a712e0ebbf9d3
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/requestBodies/createCart'
      responses:
        "200":
          description: El producto se agregó con éxito al carrito.
        "500":
          description: Error de servidor al agregar producto en el carrito
        "401":
          description: Unauthorized
  /api/carts/{cartId}/product/{pid}:
    delete:
      summary: Elimina un producto del carrito accediendo por id de carrito y id de producto. Funciona con o sin login.
      tags:
        - Carts
      parameters:
        - name: cartId
          in: path
          required: true
          description: El id del carrito sobre el que se opera, llamado cartId. Ejemplo id 662145749e3a712e0ebbf9d3
          schema:
            type: string
        - name: pid
          in: path
          required: true
          description: El id del producto que desea eliminar del carro. Ejemplo id 65f6247864b452e91a97e46c
          schema:
            type: string
      responses:
        "200":
          description: El producto se actualizó correctamente
        "500":
          description: Error de servidor al actualizar el producto
        "401":
          description: Unauthorized
  /api/carts/{cartId}/purchase:
    get:
      summary: Trae el ticket de compra con los productos del carrito más el total a pagar. Necesario estar logueado.
      tags:
        - Tickets
      parameters:
        - name: cartId
          in: path
          required: true
          description: El id del carrito sobre el que se opera, llamado cartId. Ejemplo id 662145749e3a712e0ebbf9d3
          schema:
            type: string            
      responses:
        "200":
          description: El ticket se obtuvo con éxito de la DB.
          content: 
            application/json:
              schema:
                $ref: '#/components/schemas/ticket'
        "500":
          description: Error de servidor al traer ticket
        "401":
          description: Unauthorized
# COMPONENTS
components:
  schemas:
  #products components
    product:
      type: object
      properties:
        _id:
          type: ObjectId('jkndjfs5d68d86sds57sfdfs')
          description: Id autogenerado por Mongo
        title:
          type: string
          description: Título del producto
        description:
          type: string
          description: Descripción del producto
        price:
          type: number
          description: Precio del producto
        thumbnail:
          type: string
          description: URL de la imagen del producto
        code:
          type: string
          description: Código del producto, no puede ser igual a otro
        stock:
          type: number
          description: Cantidad en stock del producto
        category:
          type: string
          description: Categoría del producto
        isActive:
          type: boolean
          description: Indica si el producto está activo o no
          default: true
        owner:
          type: string
          description: Email del propietario del producto
          default: admin
      required:
        - title
        - description
        - price
        - thumbnail
        - code
        - stock
        - category
        - owner
      example:
        _id: ObjectId('jkndjfs5d68d86sds57sfdfs')
        title: Camisa de algodón
        description: Camisa de manga larga para hombre
        price: 3500
        thumbnail: https://localhost/imagen_camisa.jpg
        code: CAM001
        stock: 50
        category: Ropa
        isActive: true
        owner: admin 
  #cart components
    cart:
      type: object
      properties:
        products:
          type: object
          properties:
              product:
                type: ObjectId
                description: Id autogenerado por Mongo
                ref: referencia del id
              quantity:
                type: number
                description: cantidad de cada producto
                default: 1
      required:
        - product
        - quantity
      example:
        products:
          - productId: 65f61b5a64b452e91a97e45a
            quantity: 3
          - productId: 65f6107064b452e91a97e452
            quantity: 1
  #ticket components
    ticket:
      type: object
      properties:
        code:
          type: string
          description: Código del ticket autogenerado
        purchase_datetime:
          type: string
          format: date-time
          description: Fecha y hora de la compra
        amount:
          type: number
          description: Monto total de la compra
        purchaser:
          type: string
          description: Comprador del ticket, su email
      example:
        code: "TCKT001"
        purchase_datetime: "2024-04-16T10:00:00Z"
        amount: 2500
        purchaser: "user@example.com"
#REGIÓN REQUEST
  requestBodies:
  # CREATE PRODUCT
    createProduct:
      type: object
      properties:
        title:
          type: string
          description: Título del producto
        description:
          type: string
          description: Descripción del producto
        price:
          type: number
          description: Precio del producto
        thumbnail:
          type: string
          description: URL de la imagen del producto
        code:
          type: string
          description: Código del producto, no puede ser igual a otro
        stock:
          type: number
          description: Cantidad en stock del producto
        category:
          type: string
          description: Categoría del producto
        isActive:
          type: boolean
          description: Indica si el producto está activo o no
          default: true
        owner:
          type: string
          description: Email del propietario del producto, por defecto admin
          default: admin
      example:
        title: Nuevo nombre de producto
        description: Esta es una  descripción
        price: 2000
        thumbnail: URL de la imagen
        code: C004
        stock: 100
        category: Categoría del producto
        owner: m@gmail.com
  # UPDATE PRODUCT
    updateProduct:
      type: object
      properties:
        title:
          type: string
          description: Nuevo título del producto
        description:
          type: string
          description: Nueva descripción del producto
        price:
          type: number
          description: Nuevo precio del producto
        thumbnail:
          type: string
          description: Nueva URL de la imagen del producto
        code:
          type: string
          description: Nuevo código del producto
        stock:
          type: number
          description: Nueva cantidad en stock del producto
        category:
          type: string
          description: Nueva categoría del producto
        isActive:
          type: boolean
          description: Indica si el producto está activo o no
        owner:
          type: string
          description: Nuevo email del propietario del producto
      example:
        title: Nuevo nombre de producto
        description: Nueva descripción del producto
        price: 2000
        thumbnail: Nueva URL de la imagen
        code: C008
        stock: 100
        category: Nueva categoría del producto
        isActive: true
        owner: nuevomail@g.com
  # CREATE CART
    createCart:
      type: object
      properties:
        products:
            type: object
            properties:
              product:
                type: ObjectId
              quantity:
                type: number
      example:
        products:
          - productId: 65f61b5a64b452e91a97e45a
            quantity: 3
          - productId: 65f6107064b452e91a97e452
            quantity: 1
  # UPDATE CART
    updateCart:
      type: object
      properties:
        products:
          type: object
          properties:
            product:
              type: ObjectId
            quantity:
              type: number
      example:
        products:
          - productId: 65f61b9964b452e91a97e45e
            quantity: 2
      